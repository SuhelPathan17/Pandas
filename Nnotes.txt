Pandas, which is styled as pandas is an open-source software library designed for the Python programming language, focusing on data manipulation and analysis. 
It provides data structures like series and DataFrames to effectively easily clean, transform, and analyze large datasets and integrates seamlessly with other Python libraries, such as NumPy and Matplotlib.
Pandas revolves around two primary Data structures: Series (1D) for single columns and DataFrame (2D) for tabular data enabling efficient data manipulation.

--------------------------------------------------------------------------
What is Pandas Used for?
With pandas, you can perform a wide range of data operations, including

Reading and writing data from various file formats like CSV, Excel, and SQL databases.
Cleaning and preparing data by handling missing values and filtering entries.
Merging and joining multiple datasets seamlessly.
Reshaping data through pivoting and stacking operations.
Conducting statistical analysis and generating descriptive statistics.
Visualizing data with integrated plotting capabilities.
-----------------------------------------------------------------------

Pandas Series
A Pandas Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, Python objects, etc.). 
The axis labels are collectively called indexes.
--
Binary operation methods on series:

FUNCTION	DESCRIPTION
add()	Method is used to add series or list like objects with same length to the caller series
sub()	Method is used to subtract series or list like objects with same length from the caller series
mul()	Method is used to multiply series or list like objects with same length with the caller series
div()	Method is used to divide series or list like objects with same length by the caller series
sum()	Returns the sum of the values for the requested axis
prod()	Returns the product of the values for the requested axis
mean()	Returns the mean of the values for the requested axis
pow()	Method is used to put each element of passed series as exponential power of caller series and returned the results
abs()	Method is used to get the absolute numeric value of each element in Series/DataFrame
cov()	Method is used to find covariance of two series
--
Pandas series method:

FUNCTION	DESCRIPTION
Series()	A pandas Series can be created with the Series() constructor method. This constructor method accepts a variety of inputs
combine_first()	Method is used to combine two series into one
count()	Returns number of non-NA/null observations in the Series
size()	Returns the number of elements in the underlying data
name()	Method allows to give a name to a Series object, i.e. to the column
is_unique()	Method returns boolean if values in the object are unique
idxmax()	Method to extract the index positions of the highest values in a Series
idxmin()	Method to extract the index positions of the lowest values in a Series
sort_values()	Method is called on a Series to sort the values in ascending or descending order
sort_index()	Method is called on a pandas Series to sort it by the index instead of its values
head()	Method is used to return a specified number of rows from the beginning of a Series. The method returns a brand new Series
tail()	Method is used to return a specified number of rows from the end of a Series. The method returns a brand new Series
le()	Used to compare every element of Caller series with passed series.It returns True for every element which is Less than or Equal to the element in passed series
ne()	Used to compare every element of Caller series with passed series. It returns True for every element which is Not Equal to the element in passed series
ge()	Used to compare every element of Caller series with passed series. It returns True for every element which is Greater than or Equal to the element in passed series
eq()	Used to compare every element of Caller series with passed series. It returns True for every element which is Equal to the element in passed series
gt()	Used to compare two series and return Boolean value for every respective element
lt()	Used to compare two series and return Boolean value for every respective element
clip()	Used to clip value below and above to passed Least and Max value
clip_lower()	Used to clip values below a passed least value
clip_upper()	Used to clip values above a passed maximum value
astype()	Method is used to change data type of a series
tolist()	Method is used to convert a series to list
get()	Method is called on a Series to extract values from a Series. This is alternative syntax to the traditional bracket syntax
unique()	Pandas unique() is used to see the unique values in a particular column
nunique()	Pandas nunique() is used to get a count of unique values
value_counts()	Method to count the number of the times each unique value occurs in a Series
factorize()	Method helps to get the numeric representation of an array by identifying distinct values
map()	Method to tie together the values from one object to another
between()	Pandas between() method is used on series to check which values lie between first and second argument
apply()	Method is called and feeded a Python function as an argument to use the function on every Series value. This method is helpful for executing custom operations that are not included in pandas or numpy

--

Pandas Series.str.slice()

Syntax: Series.str.slice(start=None, stop=None, step=None)

Parameters: 
start: int value, tells where to start slicing
stop: int value, tells where to end slicing
step: int value, tells how much characters to step during slicing
Return type:  Series with sliced substrings

----------------------------------------------------------------------
----------------------------------------------------------------------
Pandas DataFrame
Pandas DataFrame is a two-dimensional data structure with labeled axes (rows and columns).
Creating DataFrame
Pandas DataFrame is created by loading the datasets from existing storage (which can be a SQL database, a CSV file, or an Excel file).

Pandas DataFrame can be created from lists, dictionaries, a list of dictionaries, etc.
--
.describe():
data = pd.read_csv('nba.csv')
display(data.describe())

Descriptive Statistics for Numerical Columns generated using .describe() Method
count: Total number of non-null values in the column.
mean: Average value of the column.
std: Standard deviation, showing how spread out the values are.
min: Minimum value in the column.
25%: 25th percentile (Q1).
50%: Median value (50th percentile).
75%: 75th percentile (Q3).
max: Maximum value in the column.


-------------------------------------------------------------------
Pandas Extracting rows using .loc[]
Syntax: pandas.DataFrame.loc[]
Parameters: 
Index label: String or list of string of index label of rows
Return type: Data frame or Series depending on parameters


Pandas Extracting rows using .iloc[]
Syntax: pandas.DataFrame.iloc[] 
Parameters:  Index position of rows in integer or list of integer. 
Return type: Data frame or Series depending on parameters

------------------------------------------------------------

Pandas.apply() :
Pandas.apply allow the users to pass a function and apply it on every single value of the Pandas series.

series.apply(func, convert_dtype=True, args=())


Understanding axis in Pandas in Detail:

axisValue	           Direction of Operation	            Applies to
axis=0	              Column-wise (down the rows)	      Each column
axis=1	              Row-wise (across columns)	        Each row

axis=0 means “apply function to each column, with the rows changing”
axis=1 means “apply function to each row, with the columns changing”

-----------------------------------------------------------

Pandas dataframe.aggregate() :

Syntax: DataFrame.aggregate(func, axis=0, *args, **kwargs)  


Parameters:


func : callable, string, dictionary, or list of string/callables. Function to use for aggregating the data. If a function, must either work when passed a DataFrame or when passed to DataFrame.apply. For a DataFrame, can pass a dict, if the keys are DataFrame column names. 
axis : (default 0) {0 or ‘index’, 1 or ‘columns’} 0 or ‘index’: apply function to each column. 1 or ‘columns’: apply function to each row.  

Returns: Aggregated DataFrame

------------------------------------------------------------

Pandas GroupBy

Groupby is a fundamental and powerful data analysis technique in data analysis . It allows you to group categories and apply functions to them efficiently, making it essential for handling large datasets. Its ability to aggregate data with minimal code and high performance makes it invaluable for real-world projects.

Groupby mainly refers to a process involving one or more of the following steps they are: 

Splitting : It is a process in which we split data into group by applying some conditions on datasets.
Applying : It is a process in which we apply a function to each group independently
Combining : It is a process in which we combine different datasets after applying groupby and results into a data structure

------------------------------------------------------------

Pandas Read CSV in Python

Syntax: pd.read_csv(filepath_or_buffer, sep=’ ,’ , header=’infer’,  index_col=None, usecols=None, engine=None, skiprows=None, nrows=None) 


Parameters: 


filepath_or_buffer: Location of the csv file. It accepts any string path or URL of the file.
sep: It stands for separator, default is ‘, ‘.
header: It accepts int, a list of int, row numbers to use as the column names, and the start of the data. If no names are passed, i.e., header=None, then, it will display the first column as 0, the second as 1, and so on.
usecols: Retrieves only selected columns from the CSV file.
nrows: Number of rows to be displayed from the dataset.
index_col: If None, there are no index numbers displayed along with records.  
skiprows: Skips passed rows in the new data frame.


-----------------------------------------------------------

Loading Excel spreadsheet as pandas DataFrame

# Import the excel file and call it xls_file 
excel_file = pd.ExcelFile('pandasEx.xlsx') 
  
# View the excel_file's sheet names 
print(excel_file.sheet_names) 
  
# Load the excel_file's Sheet1 as a dataframe 
df = excel_file.parse('Sheet1') 
print(df) 

--

require_cols = [0, 3]  
# only read specific columns from an excel file  
required_df = pd.read_excel('SampleWork2.xlsx', usecols = require_cols)   
print(required_df)  

--------------------------------------------------------

Working with Pandas and XlsxWriter
# Create some Pandas dataframes from some data. 
df1 = pd.DataFrame({'Data': [11, 12, 13, 14]}) 
df2 = pd.DataFrame({'Data': [21, 22, 23, 24]}) 
df3 = pd.DataFrame({'Data': [31, 32, 33, 34]}) 
  
# Create a Pandas Excel writer object  
# using XlsxWriter as the engine. 
writer = pd.ExcelWriter('pandas_multiple.xlsx',  
                          engine ='xlsxwriter') 
  
# Write each dataframe to a different worksheet. 
df1.to_excel(writer, sheet_name ='Sheet1') 
df2.to_excel(writer, sheet_name ='Sheet2') 
df3.to_excel(writer, sheet_name ='Sheet3') 
  
# Close the Pandas Excel writer object 
# and output the Excel file. 
writer.save() 
